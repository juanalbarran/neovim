return {
	"nvim-treesitter/nvim-treesitter",
	branch = "master",
	lazy = false,
	build = ":TSUpdate",
	dependencies = {
		"nvim-treesitter/nvim-treesitter-textobjects",
	},
	opts = {
		sync_install = true,
		auto_install = true,
		indent = {
			enable = true,
		},
		highlight = {
			enable = true,
			additional_vim_regex_highlighting = false,
		},
		ensure_installed = {
			"bash",
			"html",
			"http",
			"lua",
			"luadoc",
			"markdown",
			"markdown_inline",
			"query",
			"vim",
			"vimdoc",
			"nix",
			"c",
			"regex",
			"terraform",
			"hcl",
			"tsx",
			"typescript",
			"javascript",
			"json",
			"yaml",
			"java",
			"xml",
		},
		incremental_selection = {
			enable = true,
			keymaps = {
				init_selection = "<Enter><Enter>",
				node_incremental = "<Enter><Enter>",
				scope_incremental = false,
				node_decremental = "<backspace>",
			},
		},
		textobjects = {
			select = {
				enable = true,
				lookahead = true,
				keymaps = {
					["af"] = { query = "@function.outer", desc = "[A]round a [F]unction." },
					["if"] = { query = "@function.inner", desc = "[I]nside a [F]unction." },
					["ac"] = { query = "@class.outer", desc = "[A]round a [C]lass." },
					["ai"] = { query = "@conditional.outer", desc = "[A]round an [I]f statement." },
					["ii"] = { query = "@conditional.inner", desc = "[I]nside an [I]f statement." },
					["al"] = { query = "@loop.outer", desc = "[A]round a [L]oop." },
					["il"] = { query = "@loop.inner", desc = "[I]nside a [L]oop." },
					["ap"] = { query = "@parameter.outer", desc = "[A]round [P]arameter." },
					["ip"] = { query = "@parameter.inner", desc = "[I]nside [P]arameter." },
				},
				selection_modes = {
					["@parameter.outer"] = "v",
					["@parameter.inner"] = "v",
					["@function.outer"] = "v",
					["@conditional.outer"] = "V",
					["@loop.outer"] = "V",
					["@class.outer"] = "<c-v>",
				},
				iclude_surrounding_whitespace = false,
			},
			move = {
				enable = true,
				set_jumps = true,
				goto_previous_start = {
					["[f"] = { query = "@function.outer", desc = "Previous function." },
					["[c"] = { query = "@class.outer", desc = "Previous class." },
					["[p"] = { query = "@parameter.inner", desc = "Previous parameter." },
				},
				goto_next_start = {
					["]f"] = { query = "@function.outer", desc = "Next function." },
					["]c"] = { query = "@class.outer", desc = "Next class." },
					["]p"] = { query = "@parameter.inner", desc = "Next parameter." },
				},
			},
		},
	},
}
